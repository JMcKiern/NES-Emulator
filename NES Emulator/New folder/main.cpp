#include <iostream>
#include "CPU.h"

//uint8_t test[] = {0xa9, 0x01, 0x8d, 0x00, 0x02, 0xa9, 0x05, 0x8d ,0x01, 0x02, 0xa9, 0x08, 0x8d, 0x02, 0x02};
//uint8_t test[] = {0xa9, 0xc0, 0xaa, 0xe8, 0x69, 0xc4, 0x00}; // BRK doesn't really work
//uint8_t test[] = {0xa2, 0x08, 0xca, 0x8e, 0x00, 0x02, 0xe0, 0x03, 0xd0, 0xf8, 0x8e, 0x01, 0x02, 0x00};
uint8_t test[] = {0x20, 0x09, 0x06, 0x20, 0x0c, 0x06, 0x20, 0x12, 0x06, 0xa2, 0x00, 0x60, 0xe8, 0xe0, 0x05, 0xd0, 
0xfb, 0x60, 0x00};
const uint8_t len = 19;

int main() {
	CPU cpu;
	std::cout << "Loaded CPU\n";
	cpu.LOADTEST(test, len);
	std::cout << "Loaded test\n";

	char x;
	int localPC;
	std::cout << "Memory Address: " << std::hex << reinterpret_cast<uintptr_t>(cpu.GetMemAddress()) << '\n';
	cpu.PrintDebugInfo();
	while (true) {
		cpu.RUNINSTR();

		std::cin >> x;
	}

	
	std::cin >> x;
}