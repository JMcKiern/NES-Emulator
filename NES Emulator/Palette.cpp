#include <cstdint>
#include <string>
#include <fstream>
#include "Palette.h"
#include "Colour.h"

void Palette::Transfer(uint8_t* arr, int length) {
	palette = new uint8_t[length];
	for (int i = 0; i < length; i++) {
		palette[i] = arr[i];
	}
}
void Palette::LoadDefault() {
	uint8_t defaultPalette[0x40 * 3] = {
		0x75, 0x75, 0x75,
		0x27, 0x1B, 0x8F,
		0x00, 0x00, 0xAB,
		0x47, 0x00, 0x9F,
		0x8F, 0x00, 0x77,
		0xAB, 0x00, 0x13,
		0xA7, 0x00, 0x00,
		0x7F, 0x0B, 0x00,
		0x43, 0x2F, 0x00,
		0x00, 0x47, 0x00,
		0x00, 0x51, 0x00,
		0x00, 0x3F, 0x17,
		0x1B, 0x3F, 0x5F,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0xBC, 0xBC, 0xBC,
		0x00, 0x73, 0xEF,
		0x23, 0x3B, 0xEF,
		0x83, 0x00, 0xF3,
		0xBF, 0x00, 0xBF,
		0xE7, 0x00, 0x5B,
		0xDB, 0x2B, 0x00,
		0xCB, 0x4F, 0x0F,
		0x8B, 0x73, 0x00,
		0x00, 0x97, 0x00,
		0x00, 0xAB, 0x00,
		0x00, 0x93, 0x3B,
		0x00, 0x83, 0x8B,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF,
		0x3F, 0xBF, 0xFF,
		0x5F, 0x97, 0xFF,
		0xA7, 0x8B, 0xFD,
		0xF7, 0x7B, 0xFF,
		0xFF, 0x77, 0xB7,
		0xFF, 0x77, 0x63,
		0xFF, 0x9B, 0x3B,
		0xF3, 0xBF, 0x3F,
		0x83, 0xD3, 0x13,
		0x4F, 0xDF, 0x4B,
		0x58, 0xF8, 0x98,
		0x00, 0xEB, 0xDB,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF,
		0xAB, 0xE7, 0xFF,
		0xC7, 0xD7, 0xFF,
		0xD7, 0xCB, 0xFF,
		0xFF, 0xC7, 0xFF,
		0xFF, 0xC7, 0xDB,
		0xFF, 0xBF, 0xB3,
		0xFF, 0xDB, 0xAB,
		0xFF, 0xE7, 0xA3,
		0xE3, 0xFF, 0xA3,
		0xAB, 0xF3, 0xBF,
		0xB3, 0xFF, 0xCF,
		0x9F, 0xFF, 0xF3,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
		0x00, 0x00, 0x00
	};
	Transfer(defaultPalette, 0x40 * 3);
}
void Palette::LoadPal(std::string palFile) {
	std::ifstream f;
	std::streampos sizef;

	f.exceptions(std::ifstream::failbit | std::ifstream::badbit);
	f.open(palFile, std::ios::in | std::ios::binary | std::ios::ate);
	sizef = f.tellg();
	f.seekg(0, std::ios::beg);

	int size = static_cast<int>(sizef);
	if (size == 0x600) {
		char* paletteChar = new char[size];

		f.read(paletteChar, sizef);
		f.close();

		Transfer(reinterpret_cast<uint8_t*>(paletteChar), size);
		delete[] paletteChar;

		loadedFromFile = true;
	}
	else {
		LoadDefault();
	}
}

Colour Palette::GetColour(uint8_t colourNum, uint8_t colourEmp) {
	uint8_t r;
	uint8_t g;
	uint8_t b;

	if (loadedFromFile) {
		colourEmp = colourEmp & 0x7;
		uint16_t palStart = (0x40 * 3) * colourEmp;
		r = palette[palStart + colourNum * 3];
		g = palette[palStart + colourNum * 3 + 1];
		b = palette[palStart + colourNum * 3 + 2];
	}
	else {
		r = palette[colourNum * 3];
		g = palette[colourNum * 3 + 1];
		b = palette[colourNum * 3 + 2];
	}
	return Colour(r, g, b);
}
Palette::Palette(std::string palFile) {
	LoadPal(palFile);
}
Palette::Palette() {
	LoadDefault();
}
Palette::~Palette() {
	delete palette;
}